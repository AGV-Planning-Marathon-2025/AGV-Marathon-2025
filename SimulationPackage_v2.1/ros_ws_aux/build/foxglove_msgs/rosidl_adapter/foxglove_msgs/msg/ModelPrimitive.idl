// generated from rosidl_adapter/resource/msg.idl.em
// with input from foxglove_msgs/msg/ModelPrimitive.msg
// generated code does not contain a copyright notice

#include "foxglove_msgs/msg/Color.idl"
#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Vector3.idl"

module foxglove_msgs {
  module msg {
    @verbatim (language="comment", text=
      "foxglove_msgs/msg/ModelPrimitive" "\n"
      "A primitive representing a 3D model file loaded from an external URL or embedded data")
    struct ModelPrimitive {
      @verbatim (language="comment", text=
        "Generated by https://github.com/foxglove/schemas" "\n"
        "Origin of model relative to reference frame")
      geometry_msgs::msg::Pose pose;

      @verbatim (language="comment", text=
        "Scale factor to apply to the model along each axis")
      geometry_msgs::msg::Vector3 scale;

      @verbatim (language="comment", text=
        "Solid color to use for the whole model if `override_color` is true.")
      foxglove_msgs::msg::Color color;

      @verbatim (language="comment", text=
        "Whether to use the color specified in `color` instead of any materials embedded in the original model.")
      boolean override_color;

      @verbatim (language="comment", text=
        "URL pointing to model file. One of `url` or `data` should be provided.")
      string url;

      @verbatim (language="comment", text=
        "(https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url` is provided.")
      @unit (value="Media type")
      string media_type;

      @verbatim (language="comment", text=
        "Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to indicate the type of the data.")
      sequence<uint8> data;
    };
  };
};
