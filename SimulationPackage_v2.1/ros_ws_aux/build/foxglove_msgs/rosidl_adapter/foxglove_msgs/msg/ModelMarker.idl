// generated from rosidl_adapter/resource/msg.idl.em
// with input from foxglove_msgs/msg/ModelMarker.msg
// generated code does not contain a copyright notice

#include "foxglove_msgs/msg/Color.idl"
#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Vector3.idl"

module foxglove_msgs {
  module msg {
    @verbatim (language="comment", text=
      "foxglove_msgs/msg/ModelMarker" "\n"
      "A marker representing a 3D model")
    struct ModelMarker {
      @verbatim (language="comment", text=
        "Generated by https://github.com/foxglove/schemas" "\n"
        "Origin of model relative to reference frame")
      geometry_msgs::msg::Pose pose;

      @verbatim (language="comment", text=
        "Scale factor to apply to the model along each axis")
      geometry_msgs::msg::Vector3 scale;

      @verbatim (language="comment", text=
        "Solid color to use for the whole model. If `use_embedded_materials` is true, this color is blended on top of the embedded material color.")
      foxglove_msgs::msg::Color color;

      @verbatim (language="comment", text=
        "Whether to use materials embedded in the model, or only the `color`")
      boolean use_embedded_materials;

      @verbatim (language="comment", text=
        "URL pointing to model file. Either `url` or `mime_type` and `data` should be provided.")
      string url;

      @verbatim (language="comment", text=
        "MIME type of embedded model (e.g. `model/gltf-binary`). Either `url` or `mime_type` and `data` should be provided.")
      string mime_type;

      @verbatim (language="comment", text=
        "Embedded model. Either `url` or `mime_type` and `data` should be provided.")
      sequence<uint8> data;
    };
  };
};
