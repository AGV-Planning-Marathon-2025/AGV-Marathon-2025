// generated from rosidl_adapter/resource/msg.idl.em
// with input from foxglove_msgs/msg/CameraCalibration.msg
// generated code does not contain a copyright notice

#include "builtin_interfaces/msg/Time.idl"

module foxglove_msgs {
  module msg {
    typedef double double__9[9];
    typedef double double__12[12];
    @verbatim (language="comment", text=
      "foxglove_msgs/msg/CameraCalibration" "\n"
      "Camera calibration parameters")
    struct CameraCalibration {
      @verbatim (language="comment", text=
        "Generated by https://github.com/foxglove/schemas" "\n"
        "Timestamp of calibration data")
      builtin_interfaces::msg::Time timestamp;

      @verbatim (language="comment", text=
        "Frame of reference for the camera. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image.")
      string frame_id;

      @verbatim (language="comment", text=
        "Image width")
      uint32 width;

      @verbatim (language="comment", text=
        "Image height")
      uint32 height;

      @verbatim (language="comment", text=
        "Name of distortion model" "\n"
        "" "\n"
        "Supported parameters: `plumb_bob` (k1, k2, p1, p2, k3) and `rational_polynomial` (k1, k2, p1, p2, k3, k4, k5, k6). Distortion models are based on [OpenCV's](https://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html) [pinhole camera model](https://en.wikipedia.org/wiki/Distortion_%28optics%29#Software_correction). This is the same [implementation used by ROS](http://docs.ros.org/en/diamondback/api/image_geometry/html/c++/pinhole__camera__model_8cpp_source.html)")
      string distortion_model;

      @verbatim (language="comment", text=
        "Distortion parameters")
      sequence<double> d;

      @verbatim (language="comment", text=
        "Intrinsic camera matrix (3x3 row-major matrix)" "\n"
        "" "\n"
        "A 3x3 row-major matrix for the raw (distorted) image." "\n"
        "" "\n"
        "Projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx, fy) and principal point (cx, cy)." "\n"
        "" "\n"
        "```" "\n"
        "    [fx  0 cx]" "\n"
        "K = [ 0 fy cy]" "\n"
        "    [ 0  0  1]" "\n"
        "```")
      double__9 k;

      @verbatim (language="comment", text=
        "Rectification matrix (stereo cameras only, 3x3 row-major matrix)" "\n"
        "" "\n"
        "A rotation matrix aligning the camera coordinate system to the ideal stereo image plane so that epipolar lines in both stereo images are parallel.")
      double__9 r;

      @verbatim (language="comment", text=
        "Projection/camera matrix (3x4 row-major matrix)" "\n"
        "" "\n"
        "```" "\n"
        "    [fx'  0  cx' Tx]" "\n"
        "P = [ 0  fy' cy' Ty]" "\n"
        "    [ 0   0   1   0]" "\n"
        "```" "\n"
        "" "\n"
        "By convention, this matrix specifies the intrinsic (camera) matrix of the processed (rectified) image. That is, the left 3x3 portion is the normal camera intrinsic matrix for the rectified image." "\n"
        "" "\n"
        "It projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx', fy') and principal point (cx', cy') - these may differ from the values in K." "\n"
        "" "\n"
        "For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will also have R = the identity and P[1:3,1:3] = K." "\n"
        "" "\n"
        "For a stereo pair, the fourth column [Tx Ty 0]' is related to the position of the optical center of the second camera in the first camera's frame. We assume Tz = 0 so both cameras are in the same stereo image plane. The first camera always has Tx = Ty = 0. For the right (second) camera of a horizontal stereo pair, Ty = 0 and Tx = -fx' * B, where B is the baseline between the cameras." "\n"
        "" "\n"
        "Given a 3D point [X Y Z]', the projection (x, y) of the point onto the rectified image is given by:" "\n"
        "" "\n"
        "```" "\n"
        "[u v w]' = P * [X Y Z 1]'" "\n"
        "       x = u / w" "\n"
        "       y = v / w" "\n"
        "```" "\n"
        "" "\n"
        "This holds for both images of a stereo pair.")
      double__12 p;
    };
  };
};
