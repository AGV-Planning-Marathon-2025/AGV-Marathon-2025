// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from foxglove_msgs:msg/CompressedVideo.idl
// generated code does not contain a copyright notice

#ifndef FOXGLOVE_MSGS__MSG__DETAIL__COMPRESSED_VIDEO__STRUCT_H_
#define FOXGLOVE_MSGS__MSG__DETAIL__COMPRESSED_VIDEO__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'timestamp'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'frame_id'
// Member 'format'
#include "rosidl_runtime_c/string.h"
// Member 'data'
#include "rosidl_runtime_c/primitives_sequence.h"

/// Struct defined in msg/CompressedVideo in the package foxglove_msgs.
/**
  * foxglove_msgs/msg/CompressedVideo
  * A single frame of a compressed video bitstream
 */
typedef struct foxglove_msgs__msg__CompressedVideo
{
  /// Generated by https://github.com/foxglove/schemas
  /// Timestamp of video frame
  builtin_interfaces__msg__Time timestamp;
  /// Frame of reference for the video.
  ///
  /// The origin of the frame is the optical center of the camera. +x points to the right in the video, +y points down, and +z points into the plane of the video.
  rosidl_runtime_c__String frame_id;
  /// Compressed video frame data.
  ///
  /// For packet-based video codecs this data must begin and end on packet boundaries (no partial packets), and must contain enough video packets to decode exactly one image (either a keyframe or delta frame). Note: Foxglove does not support video streams that include B frames because they require lookahead.
  rosidl_runtime_c__uint8__Sequence data;
  /// Video format.
  ///
  /// Supported values: `h264` (Annex B formatted data only)
  rosidl_runtime_c__String format;
} foxglove_msgs__msg__CompressedVideo;

// Struct for a sequence of foxglove_msgs__msg__CompressedVideo.
typedef struct foxglove_msgs__msg__CompressedVideo__Sequence
{
  foxglove_msgs__msg__CompressedVideo * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} foxglove_msgs__msg__CompressedVideo__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // FOXGLOVE_MSGS__MSG__DETAIL__COMPRESSED_VIDEO__STRUCT_H_
