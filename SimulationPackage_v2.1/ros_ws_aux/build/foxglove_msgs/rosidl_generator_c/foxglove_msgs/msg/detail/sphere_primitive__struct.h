// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from foxglove_msgs:msg/SpherePrimitive.idl
// generated code does not contain a copyright notice

#ifndef FOXGLOVE_MSGS__MSG__DETAIL__SPHERE_PRIMITIVE__STRUCT_H_
#define FOXGLOVE_MSGS__MSG__DETAIL__SPHERE_PRIMITIVE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'pose'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'size'
#include "geometry_msgs/msg/detail/vector3__struct.h"
// Member 'color'
#include "foxglove_msgs/msg/detail/color__struct.h"

/// Struct defined in msg/SpherePrimitive in the package foxglove_msgs.
/**
  * foxglove_msgs/msg/SpherePrimitive
  * A primitive representing a sphere or ellipsoid
 */
typedef struct foxglove_msgs__msg__SpherePrimitive
{
  /// Generated by https://github.com/foxglove/schemas
  /// Position of the center of the sphere and orientation of the sphere
  geometry_msgs__msg__Pose pose;
  /// Size (diameter) of the sphere along each axis
  geometry_msgs__msg__Vector3 size;
  /// Color of the sphere
  foxglove_msgs__msg__Color color;
} foxglove_msgs__msg__SpherePrimitive;

// Struct for a sequence of foxglove_msgs__msg__SpherePrimitive.
typedef struct foxglove_msgs__msg__SpherePrimitive__Sequence
{
  foxglove_msgs__msg__SpherePrimitive * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} foxglove_msgs__msg__SpherePrimitive__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // FOXGLOVE_MSGS__MSG__DETAIL__SPHERE_PRIMITIVE__STRUCT_H_
